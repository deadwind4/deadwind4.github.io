<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 天问</title>
    <link>https://blog.luning.wang/post/</link>
    <description>Recent content in Posts on 天问</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 06 Dec 2019 15:22:58 +0800</lastBuildDate>
    
	<atom:link href="https://blog.luning.wang/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DataNode健康检查</title>
      <link>https://blog.luning.wang/post/datanode%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5/</link>
      <pubDate>Fri, 06 Dec 2019 15:22:58 +0800</pubDate>
      
      <guid>https://blog.luning.wang/post/datanode%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5/</guid>
      <description>&lt;h1 id=&#34;heading&#34;&gt;概述&lt;/h1&gt;
&lt;p&gt;HDFS的一个核心假设是，硬件故障是常态，而不是例外。健康检查尽可能不影响线上使用。&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;一共有三种检查机制：Block Scanner &amp;amp; Volume Scanner、Directory Scanner、Disk Checker。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gevent指南</title>
      <link>https://blog.luning.wang/post/gevent%E6%8C%87%E5%8D%97/</link>
      <pubDate>Fri, 01 Nov 2019 16:37:43 +0800</pubDate>
      
      <guid>https://blog.luning.wang/post/gevent%E6%8C%87%E5%8D%97/</guid>
      <description></description>
    </item>
    
    <item>
      <title>MySQL笔记</title>
      <link>https://blog.luning.wang/post/mysql%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 03 Dec 2018 15:07:19 +0800</pubDate>
      
      <guid>https://blog.luning.wang/post/mysql%E7%AC%94%E8%AE%B0/</guid>
      <description>Mysql学习笔记 安装 资料 删除掉所有有关mariadb的包
wget https://cdn.mysql.com/archives/mysql-5.7/mysql-5.7.22-linux-glibc2.12-x86_64.tar.gz wget https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.24-1.el7.x86_64.rpm-bundle.tar rpm -qa | grep -i mariadb rpm -e --nodeps mariadb-libs-5.5.52-1.el7.x86_64 rpm -ivh mysql-community-common-5.7.23-1.el7.x86_64.rpm rpm -ivh mysql-community-libs-5.7.23-1.el7.x86_64.rpm rpm -ivh mysql-community-client-5.7.23-1.el7.x86_64.rpm rpm -ivh mysql-community-server-5.7.23-1.el7.x86_64.rpm 用户  创建 CREATE USER &#39;username&#39;@&#39;host&#39; IDENTIFIED BY &#39;password&#39;; 字段含义  username：创建用户的用户名 host：指定用户在哪个主机可以登录，如果想让该用户可以从任意远程主机登录，则使用通配符% password：该用户的登录密码。如果为空，则该用户不需要密码即可登录。  举例： CREATE USER &#39;test&#39;@&#39;%&#39; IDENTIFIED BY &#39;test&#39;; CREATE USER &#39;test&#39;; 权限 GRANT privileges ON databasename.tablename TO &#39;username&#39;@&#39;host&#39; 字段含义  privileges：用户的权限。如SELECT、INSERT、UPDATE等，如授予所有权限则为ALL。 databasename：数据库名 tablename：表名，如授予所有库和表的操作权限则为*，如*.*  例子： GRANT SELECT, INSERT ON testdb.</description>
    </item>
    
    <item>
      <title>Scala语法笔记</title>
      <link>https://blog.luning.wang/post/scala%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 01 Nov 2018 01:15:09 +0800</pubDate>
      
      <guid>https://blog.luning.wang/post/scala%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/</guid>
      <description>函数 如果函数没参数可以不写括号
def three = 1 + 2 匿名函数
(x: Int) =&amp;gt; x + 1 val addOne = (x: Int) =&amp;gt; x + 1 部分应用
def adder(m: Int, n: Int) = m + n val add2 = adder(2, _: Int) add2(3) res: Int = 5 科里化
def multiply(m: Int)(n: Int): Int = m * n multiply(2)(3) val timesTwo = multiply(2) _ times(3) 类 除了方法之外的代码全是构造函数
private 内部类可以访问private
外部类不能访问private
但是Java中都可以
class Outer{ class Inner{ private def f(){println(&amp;quot;f&amp;quot;)} class InnerMost{ f() // 正确 } } (new Inner).</description>
    </item>
    
    <item>
      <title>SQL笔记</title>
      <link>https://blog.luning.wang/post/sql%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 10 Mar 2018 01:15:09 +0800</pubDate>
      
      <guid>https://blog.luning.wang/post/sql%E7%AC%94%E8%AE%B0/</guid>
      <description>基础知识 SQL IN SELECT column_name FROM table_name WHERE column_name IN (value1, value2); 作用：筛选column等于value1或value2。
SQL BETWEEN SELECT column_name(s) FROM table_name WHERE column_name IN (value1,value2); 作用：筛选大于等于value小于value2。 value可为字符串。
ALTER 添加列
ALTER TABLE table_name ADD column_name datatype 删除列
ALTER TABLE table_name DROP COLUMN column_name 改变列数据类型
ALTER TABLE table_name ALTER COLUMN column_name datatype 常用记不住的SQL语句收集 创建行时create_at字段自动填写为当前时间。 ALTER TABLE foo MODIFY create_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP; 更新行时update_at字段自动填写为当前时间。 ALTER TABLE foo MODIFY update_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;</description>
    </item>
    
  </channel>
</rss>